{"mappings":"AAAA,MAAMA,UAAYC,EAAE,aACdC,QAAUF,UAAUG,KAAK,WACzBC,EAAEC,aAAaC,QAAQ,KACvBC,QAAQC,KAAKC,MAAML,GACnBM,QAASH,SAAW,CACxB,CAAEI,KAAM,IAAKC,IAAK,4BAClB,CAAED,KAAM,IAAKC,IAAK,0BAGdC,YAAaD,GACVA,EAAIE,QAAQ,WAAW,IAC7BA,QAAQ,UAAU,IACQA,QAAlB,OAAO,IACfA,QAAO,OAAQ,IAEZC,OAAO,KACTf,UAAUG,KAAK,iBAAiBa,SAAQN,QAAAO,SAAA,CAAAC,EACpBC,KAEV,MAAFC,EAAMnB,EAAE,mFAcRiB,EAAAP,+C,0OAKAU,aAAAnB,SACJkB,EAAAE,GAAA,cACPC,OAAAC,KAAAN,EAAAN,QAECQ,EAAAE,GAAa,QAAI,UAAeG,IACvBA,EAAGC,kBAIFhB,QAAQiB,OAACR,EAAA,GAEXJ,gB,SAMVd,EAAA,cAAOqB,GAAA,SAAmB,KACtB,IAAAV,EAAMW,OAAOK,OAAK,gBAAkB,IAAAhB,EAAAiB,QAAA,UAAAjB,EAAA,WAAAA,GACQkB,QAAAC,IAAhCnB,G,cACKD,KAAAE,YAAAD,GAAA,GAAAoB,cACnBpB,IAAUA,IACEG,Y","sources":["src/main.js"],"sourcesContent":["const $siteList = $(\".siteList\");\r\nconst $lastLi = $siteList.find(\"li.last\");\r\nconst x=localStorage.getItem('x')\r\nconst xObject=JSON.parse(x)//把字符串重新变成对象,与JSON.stringify对应\r\nconst hashMap =xObject || [\r\n  { logo: \"B\", url: \"https://www.bilibili.com\" },\r\n  { logo: \"B\", url: \"https://www.baidu.com\" }\r\n];\r\n\r\nconst simplifyUrl=(url)=>{\r\n  return url.replace('https://','') \r\n  .replace('http://','')//注意用法,直接写上需要变换的value\r\n  .replace('www.','')\r\n  .replace(/\\/.*/,'')//删除/开头的内容直到结尾\r\n}//产生一个新的url,原本的url不变\r\nconst render=()=>{\r\n    $siteList.find('li:not(.last)').remove()/*清空之前的再重新渲染*/\r\n    hashMap.forEach((node,index) => {\r\n      //创建一个li  \r\n      const $li = $(`<li>\r\n          \r\n          <div class=\"site\">\r\n              <div class=\"logo\">${node.logo}</div>\r\n              <div class=\"link\">${simplifyUrl(node.url)}</div>\r\n              <div class=\"close\">\r\n              <svg class=\"iconpark-icon\">\r\n                <use href=\"#close-small\"></use>\r\n              </svg>\r\n              </div>\r\n          </div>\r\n          </li>`).insertBefore($lastLi)\r\n          $li.on('click',()=>{\r\n            window.open(node.url)\r\n          })//代替a标签的作用,适用于里面有小的元素但是监听事件不一致的情况\r\n          $li.on('click','.close',(e)=>{\r\n            e.stopPropagation()//阻止冒泡(X冒泡到li)\r\n            hashMap.splice(index,1)//删除(1个)元素\r\n            render()\r\n          })\r\n      })\r\n}\r\n    render()//第一次渲染\r\n$(\".addButton\").on(\"click\", () => {\r\n    let url = window.prompt(\"请问要添加跳转哪个网址狸\");\r\n    if (url.indexOf(\"http\") !== 0) {\r\n      url = \"https://\" + url; //用户输入非http开头的网址\r\n    }\r\n    console.log(url);\r\n    hashMap.push({\r\n      logo:simplifyUrl(url)[0].toUpperCase(),//touppercase,使其大写\r\n      url:url}\r\n      );\r\n        render()//第二次渲染\r\n      });\r\n  \r\nwindow.onbeforeunload=()=>{\r\n    const string=JSON.stringify(hashMap)//localstorage只能存字符串不能存對象,这里把对象转化成字符串\r\n    localStorage.setItem('x',string)//在本地设置一个x,值就是string\r\n}\r\n$(document).on('keypress',(e)=>{\r\n  const{key}=e//需要理解\r\n  for(let i=0;i<hashMap.length;i++){\r\n    if(hashMap[i].logo.toLowerCase()===key){\r\n      window.open(hashMap[i].url)\r\n    }\r\n  }\r\n})\r\n"],"names":["$siteList","$","$lastLi","find","x","localStorage","getItem","xObject","JSON","parse","hashMap","logo","url","simplifyUrl","replace","render","remove","forEach","node","index","$li","insertBefore","on","window","open","e","stopPropagation","splice","prompt","indexOf","console","log","toUpperCase"],"version":3,"file":"index.b3f44ef1.js.map"}